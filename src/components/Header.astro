---
import DarkModeToggle from './DarkModeToggle';
---

<header class="header">
  <div class="name-container">
    <a href="/" class="name">Ethan MacCumber</a>
  </div>
  <div class="nav-area">
    <button class="menu-toggle" aria-label="Toggle menu">
      <div class="menu-icon">
        <span></span>
        <span></span>
        <span></span>
      </div>
    </button>
    <nav class="nav">
      <a href="/photographs" class="nav-link">photographs</a>
      <a href="/films" class="nav-link">films</a>
      <a href="/writing" class="nav-link">writing</a>
      <a href="/information" class="nav-link">information</a>
      <DarkModeToggle client:load />
    </nav>
  </div>
</header>

<style>
  .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
    background: #fff;
    border-bottom: 1px solid #eee;
    position: sticky;
    top: 0;
    z-index: 100;
  }

  body.dark-mode .header {
    background: #000;
    border-bottom-color: #333;
  }

  .name-container {
    flex: 1;
  }

  .name {
    font-size: 1.5rem;
    font-weight: 600;
    color: #333;
    text-decoration: none;
  }

  body.dark-mode .name {
    color: #fff;
  }

  .nav-area {
    position: relative;
  }

  .menu-toggle {
    display: none;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
  }

  .menu-icon {
    width: 24px;
    height: 18px;
    position: relative;
  }

  .menu-icon span {
    display: block;
    position: absolute;
    height: 2px;
    width: 100%;
    background: #333;
    border-radius: 1px;
    opacity: 1;
    left: 0;
    transform: rotate(0deg);
    transition: 0.25s ease-in-out;
  }

  body.dark-mode .menu-icon span {
    background: #fff;
  }

  .menu-icon span:nth-child(1) {
    top: 0px;
  }

  .menu-icon span:nth-child(2) {
    top: 8px;
  }

  .menu-icon span:nth-child(3) {
    top: 16px;
  }

  .menu-icon.open span:nth-child(1) {
    top: 8px;
    transform: rotate(135deg);
  }

  .menu-icon.open span:nth-child(2) {
    opacity: 0;
    left: -60px;
  }

  .menu-icon.open span:nth-child(3) {
    top: 8px;
    transform: rotate(-135deg);
  }

  .nav {
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  .nav-link {
    color: #666;
    text-decoration: none;
    font-size: 0.95rem;
    transition: color 0.2s ease;
  }

  .nav-link:hover,
  .nav-link.active {
    color: #333;
  }

  body.dark-mode .nav-link {
    color: #aaa;
  }

  body.dark-mode .nav-link:hover,
  body.dark-mode .nav-link.active {
    color: #fff;
  }

  @media (max-width: 768px) {
    .header {
      padding: 1rem;
    }

    .menu-toggle {
      display: block;
    }

    .nav {
      display: none;
      position: absolute;
      top: 100%;
      right: 0;
      background: #fff;
      border: 1px solid #eee;
      border-radius: 8px;
      padding: 1rem;
      flex-direction: column;
      gap: 1rem;
      min-width: 200px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    body.dark-mode .nav {
      background: #111;
      border-color: #333;
    }

    .nav.open {
      display: flex;
    }
  }
</style>

<script>
  // Mobile menu functionality
  const menuToggle = document.querySelector('.menu-toggle');
  const nav = document.querySelector('.nav');
  const menuIcon = document.querySelector('.menu-icon');
  const navLinks = document.querySelectorAll('.nav-link');

  function toggleMenu() {
    nav?.classList.toggle('open');
    menuIcon?.classList.toggle('open');
  }

  function closeMenu() {
    nav?.classList.remove('open');
    menuIcon?.classList.remove('open');
  }

  menuToggle?.addEventListener('click', toggleMenu);

  // Close menu when clicking nav links
  navLinks.forEach(link => {
    link.addEventListener('click', closeMenu);
  });

  // Close menu when clicking outside
  document.addEventListener('click', (e) => {
    if (!e.target?.closest('.nav-area')) {
      closeMenu();
    }
  });

  // Set active nav link based on current path
  function setActiveLink() {
    const currentPath = window.location.pathname;
    
    navLinks.forEach(link => {
      const href = link.getAttribute('href');
      if (href && (currentPath === href || (href !== '/' && currentPath.startsWith(href)))) {
        link.classList.add('active');
      } else {
        link.classList.remove('active');
      }
    });
  }

  // Set active link on page load
  setActiveLink();
</script>